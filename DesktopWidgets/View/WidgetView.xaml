<Window x:Class="DesktopWidgets.View.WidgetView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DesktopWidgets"
        xmlns:viewModel="clr-namespace:DesktopWidgets.ViewModel"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:command="http://www.galasoft.ch/mvvmlight"
        xmlns:classes="clr-namespace:DesktopWidgets.Classes"
        mc:Ignorable="d"
        classes:SizeObserver.Observe="True"
        classes:SizeObserver.ObservedWidth="{Binding ActualWidth, Mode=OneWayToSource}"
        classes:SizeObserver.ObservedHeight="{Binding ActualHeight, Mode=OneWayToSource}"
        Opacity="{Binding Opacity, Mode=TwoWay}">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="MouseDown">
            <command:EventToCommand Command="{Binding MouseDown, Mode=OneWay}"
                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="LocationChanged">
            <command:EventToCommand Command="{Binding LocationChanged, Mode=OneWay}"
                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Closing">
            <command:EventToCommand Command="{Binding Closing, Mode=OneWay}"
                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />
        </i:EventTrigger>
        <i:EventTrigger EventName="KeyDown">
            <command:EventToCommand Command="{Binding KeyDown, Mode=OneWay}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.Resources>
        <classes:BoolToThicknessConverter x:Key="BooleanToThicknessConverter" />
        <classes:MultiBoolToVisibilityConverter x:Key="MultiBooleanToVisibilityConverter" />
        <classes:StringToIsNotNullOrEmptyConverter x:Key="StringToIsNotNullOrEmptyConverter" />
        <classes:StringToIsNotNullOrWhiteSpaceConverter x:Key="StringToIsNotNullOrWhiteSpaceConverter" />
        <classes:BoolToEnableDisableNameConverter x:Key="BoolToEnableDisableNameConverter" />
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <classes:ScrollBarVisibilityConverter x:Key="ScrollBarVisibilityConverter" />

        <SolidColorBrush x:Key="WindowBackgroundBrush" Color="{Binding Settings.BackgroundColor}"
                         Opacity="{Binding Settings.BackgroundOpacity}" />
        <ImageBrush x:Key="WindowBackgroundImageBrush" ImageSource="{Binding Settings.BackgroundImagePath}"
                    Opacity="{Binding Settings.BackgroundImageOpacity}" />
        <SolidColorBrush x:Key="WindowForegroundBrush" Color="{Binding Settings.TextColor}" />
        <SolidColorBrush x:Key="WindowBorderBrush" Color="{Binding Settings.BorderColor}"
                         Opacity="{Binding Settings.BorderOpacity}" />

        <SolidColorBrush x:Key="NameBackgroundBrush" Color="{Binding Settings.NameBackgroundColor}"
                         Opacity="{Binding Settings.NameBackgroundOpacity}" />
        <SolidColorBrush x:Key="NameForegroundBrush" Color="{Binding Settings.NameTextColor}" />

        <Style x:Key="WidgetWindowStyle" TargetType="{x:Type Window}">
            <Setter Property="WindowStyle" Value="None" />
            <Setter Property="ResizeMode" Value="NoResize" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="AllowsTransparency" Value="True" />
            <Setter Property="ShowInTaskbar" Value="False" />
            <Setter Property="SizeToContent" Value="WidthAndHeight" />
            <Setter Property="ShowActivated" Value="{Binding Settings.ActivateOnShow}" />
            <Setter Property="Topmost" Value="{Binding OnTop}" />
            <Setter Property="Left" Value="{Binding Left, Mode=TwoWay}" />
            <Setter Property="Top" Value="{Binding Top, Mode=TwoWay}" />
        </Style>
        <Style x:Key="WidgetBorderStyle" TargetType="{x:Type Border}">
            <Setter Property="Background" Value="{StaticResource WindowBackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{StaticResource WindowBorderBrush}" />
            <Setter Property="CornerRadius" Value="4" />
            <Setter Property="BorderThickness"
                    Value="{Binding Settings.BorderEnabled, Converter={StaticResource BooleanToThicknessConverter}}" />
        </Style>
        <Style x:Key="WidgetBorderContainerStyle" TargetType="{x:Type Border}">
            <Setter Property="Background" Value="{StaticResource WindowBackgroundImageBrush}" />
            <Setter Property="Width" Value="{Binding Width}" />
            <Setter Property="Height" Value="{Binding Height}" />
        </Style>
        <Style x:Key="ScrollViewerContainerStyle" TargetType="{x:Type ScrollViewer}">
            <Setter Property="MinWidth" Value="{Binding Settings.MinWidth}" />
            <Setter Property="MinHeight" Value="{Binding Settings.MinHeight}" />
            <Setter Property="MaxWidth" Value="{Binding MaxWidth}" />
            <Setter Property="MaxHeight" Value="{Binding MaxHeight}" />
            <Setter Property="VerticalScrollBarVisibility"
                    Value="{Binding Path=Settings.ScrollBarVisibility, Converter={StaticResource ScrollBarVisibilityConverter}}" />
            <Setter Property="HorizontalScrollBarVisibility"
                    Value="{Binding Path=Settings.ScrollBarVisibility, Converter={StaticResource ScrollBarVisibilityConverter}}" />
        </Style>
        <Style x:Key="UserControlStyle" TargetType="{x:Type UserControl}">
            <Setter Property="Foreground" Value="{StaticResource WindowForegroundBrush}" />
            <Setter Property="FontSize" Value="{Binding Settings.FontSize}" />
            <Setter Property="FontFamily" Value="{Binding Settings.FontFamily}" />
            <Setter Property="Margin" Value="{Binding Settings.Padding}" />
        </Style>
        <Style x:Key="NameTextBlockStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="FontFamily" Value="{Binding Settings.NameFontFamily}" />
            <Setter Property="FontSize" Value="{Binding Settings.NameFontSize}" />
            <Setter Property="FontWeight" Value="{Binding Settings.NameFontWeight}" />
            <Setter Property="TextAlignment" Value="{Binding Settings.NameAlignment}" />
            <Setter Property="Background" Value="{StaticResource NameBackgroundBrush}" />
            <Setter Property="Foreground" Value="{StaticResource NameForegroundBrush}" />
            <Setter Property="Text" Value="{Binding Settings.Name}" />
            <Setter Property="Visibility">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource MultiBooleanToVisibilityConverter}">
                        <Binding Path="Settings.Name"
                                 Converter="{StaticResource StringToIsNotNullOrWhiteSpaceConverter}" />
                        <Binding Path="Settings.ShowName" />
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Window.Style>
        <Binding Source="{StaticResource WidgetWindowStyle}" />
    </Window.Style>
    <StackPanel>
        <TextBlock Style="{StaticResource NameTextBlockStyle}" />
        <Border Style="{StaticResource WidgetBorderStyle}">
            <Border Style="{StaticResource WidgetBorderContainerStyle}">
                <ScrollViewer x:Name="MainContentContainer" Style="{StaticResource ScrollViewerContainerStyle}" />
                <Border.ContextMenu>
                    <ContextMenu
                        Visibility="{Binding Settings.ShowContextMenu, Converter={StaticResource BooleanToVisibilityConverter}}"
                        IsOpen="{Binding IsContextMenuOpen, Mode=OneWayToSource}">
                        <MenuItem Header="Edit..." Command="{Binding EditWidget}" />
                        <Separator />
                        <MenuItem Header="Reload" Command="{Binding ReloadWidget}" />
                        <MenuItem
                            Header="{Binding Settings.Disabled, Converter={StaticResource BoolToEnableDisableNameConverter}}"
                            Command="{Binding ToggleEnableWidget}" />
                        <Separator />
                        <MenuItem Header="Manage All..." Command="{Binding ManageAllWidgets}" />
                    </ContextMenu>
                </Border.ContextMenu>
            </Border>
        </Border>
    </StackPanel>
</Window>